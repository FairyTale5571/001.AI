
package bot

import (
	"001.AI/config"
	"001.AI/database"
	"001.AI/logger"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"strings"
)

func onUserConnected(s *discordgo.Session, u *discordgo.GuildMemberAdd) {
	user := u.Member.User
	logger.PrintLog("New user connected %v#%v | ID: %v",user.Username, user.Discriminator, user.ID)
	sendPrivateEmbedMessage(u.User.ID, generateWelcomeEmbed(u.User))
	text := fmt.Sprintf("üòÄ –ü–æ–ª—å–∑–≤–æ–≤–∞—Ç–µ–ª—å %s#%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è %s",user.Username, user.Discriminator, pingUser(user.ID))
	sendMessage("927519630396891137",text)
	database.SetConnectLog(u.GuildID,user.ID,user.Username,user.Discriminator,"connected")
}

func onUserDisconnected(s *discordgo.Session, u *discordgo.GuildMemberRemove) {
	user := u.Member.User
	logger.PrintLog("User disconnected %v#%v | ID: %v",user.Username, user.Discriminator, user.ID)

	text := fmt.Sprintf("üòü –ü–æ–ª—å–∑–≤–æ–≤–∞—Ç–µ–ª—å %s#%s –æ—Ç—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è %s",user.Username, user.Discriminator, pingUser(user.ID))
	sendMessage("927519630396891137",text)
	database.SetConnectLog(u.GuildID,user.ID,user.Username,user.Discriminator,"disconnected")

}

func onCommandsCall(s *discordgo.Session, i *discordgo.InteractionCreate) {
	switch i.Type {
	case discordgo.InteractionApplicationCommand:
		if h, ok := commandHandlers[i.ApplicationCommandData().Name]; ok {
			h(s, i)
		}
	case discordgo.InteractionMessageComponent:

		if h, ok := componentsHandlers[i.MessageComponentData().CustomID]; ok {
			h(s, i)
		}
	}
}

func onMessageHandle(s *discordgo.Session, m *discordgo.MessageCreate) {
	if strings.HasPrefix(m.Content, config.GetPrefix()) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		var vars []string
		var content string
		inputSplit := strings.Split(m.Content, " ")
		for idx := range inputSplit {
			if idx == 0 {
				content = inputSplit[idx]
			}else{
				vars = append(vars, inputSplit[idx])
			}
		}
		switch content {
			case "!help":
				printSimpleMessage(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç," + pingUser(m.Author.ID) + "!" +
					" –≠—Ç–æ –±–æ—Ç –ø–∞–Ω–∞ –ö–∏–µ–≤—Å–∫–æ–≥–æ, —Ü–∞—Ä—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–∏—Ä–∞!")
		case "!e":
			sendPrivateEmbedMessage(m.Author.ID, generateWelcomeEmbed(m.Author))
		case "!s":
			sendPrivateMessage(m.Author.ID,
				"–ü—Ä–∏–≤–µ—Ç," + pingUser(m.Author.ID) + "!\n" +
				"–≠—Ç–æ –±–æ—Ç –ø–∞–Ω–∞ –ö–∏–µ–≤—Å–∫–æ–≥–æ, —Ü–∞—Ä—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–∏—Ä–∞!\n" +
				"–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ –∫–ª–∞—Å—Å–Ω—ã–º –∫–∞–∫ –ü–∞–Ω –°–µ—Ä–≥–µ–π –∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–º –∫–∞–∫ –¢—ë–º–∞\n" +
				"–¢–æ–≥–¥–∞ –∑–∞–ø–æ–ª–Ω–∏ —ç—Ç—É —Ñ–æ—Ä–º—É **—Å—Å—ã–ª–∫–∞ —Ç—É—Ç –±—É–¥–µ—Ç** –∏ –º—ã –Ω–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–∞–∫ —Å—Ä–∞–∑—É" +
				"")
		}
	}
}
